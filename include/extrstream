//
// iostream extentions for advanced formatting &
// additional compatibility with C stdio layer.
//
// extrstream
// Header file
//
// author: Solomatov A.A. (aso)
// ver.  : v.1.1
// date  : 05.07.22.
//


#ifndef __EXTRSTREAM_ASO__
#define __EXTRSTREAM_ASO__

#include <functional>
#include "tuplecall"

namespace aso
{



    //
    // Naiv implementation of the boost::format() analogue for the format string output
    // Usage:
    //
    //     cout << aso::boost("Hellow, my name is %s" and I am %d years old.", "John, 29) << endl;
    //
    // or:
    //
    //     cout << aso::boost("Hellow, my name is %s" and I am %d years old.") % "John % 29 << endl;
    //
    // Check the operation priority when the second form is used.
    //
    //
    // Sources (in russian):
    // https://overcoder.net/q/54881/получение-файла-из-std-fstream
    // https://overcoder.net/q/54881/%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-%D1%84%D0%B0%D0%B9%D0%BB%D0%B0-%D0%B8%D0%B7-std-fstream
    // https://ask-dev.ru/info/113124/getting-a-file-from-a-stdfstream
    //
    // Original:
    // Implementation may not be fully cross-platform, but simple
    //
    // Simple crack:  http://www.ginac.de/~kreckel/fileno/ (reply dvorak) & see this extention:
    // gcc http://gcc.gnu.org/onlinedocs/gcc-4.6.2/libstdc++/api/a00069.html#a59f78806603c619eafcd4537c920f859,
    // There is a solution, that works at GCC (> 4.8) & clang (at least, 3.3)
    // [...]
    //
    // Usage:
    //
    // #include <stdio.h>
    //
    // #include <fstream>
    // #include <ext/stdio_filebuf.h>
    //
    // /* [ -->  #include "include/extrstream" <-- Not needeed on user file? ]
    //
    //
    // int main(){
    //     std::ofstream ofs("file.txt");
    //     fprintf(cfile(ofs), "sample1");
    //     fflush(cfile(ofs)); // ofs << std::flush; doesn't help
    //     ofs << "sample2\n";
    // }
    // Flushing C file after output on it & before output to tied C++ fstream - is strongly recommended!
    //


    // Get C File, tied with passed ofstream
    FILE* cfile(std::ofstream const& ofs);

    // Get C File, tied with passed ifstream
    FILE* cfile(std::ifstream const& ifs);

    // Overloads for cout, cerr & clog iostreams
    FILE* cfile(std::ostream const& os);

    // Overloads for cin iostreams
    FILE* cfile(std::istream const& is);




    template <typename ...PrnTypes>
    class Formatter
    {
    public:
	Formatter (const std::string&&, PrnTypes&&...);
	template <typename OutStream>
	    OutStream& output(OutStream&) const;
	Formatter(const std::tuple<std::string, PrnTypes...>&& data): items(data) {};

	template<typename T>
	Formatter<PrnTypes..., T> generate(T&& item) const {
	    return /*Formatter<PrnTypes..., T>(*/std::tuple_cat(items, std::make_tuple(std::forward<T>(item)));};

    private:

	std::tuple<std::string, PrnTypes...> items;

    }; /* Formatter */


    // helper for aso::format::output
    // additional procedures can be added if needed
    extern std::ostream& output_helper(std::ostream& os, const std::string& ...);
    extern std::ofstream& output_helper(std::ofstream& os, const std::string& ...);
    extern std::ostringstream& output_helper(std::ostringstream& os, const std::string& ...);
    extern std::stringstream& output_helper(std::stringstream& os, const std::string& ...);

    // Comnstructor
    template <typename ...PrnTypes>
    inline Formatter<PrnTypes...>::Formatter(const std::string&& fmt_str, PrnTypes&&... prnvals):
	items(std::forward<const std::string>(fmt_str), prnvals...)
    {};


    // General definition of the format::output
    template <typename ...PrnTypes> template <typename OutStream>
    inline OutStream&
	Formatter<PrnTypes...>::output(OutStream& os) const
    {
//	return Tuple<const std::string, PrnTypes...>::simple::call([&os](const std::string& fstr, PrnTypes... prnitems) mutable -> OutStream&
//		{return output_helper(os, fstr, prnitems...);}, items);
//	return Tuple<const std::string, PrnTypes...>::simple_call([&os](const std::string& fstr, PrnTypes... prnitems) mutable -> OutStream&
//		{return output_helper(os, fstr, prnitems...);}, items);
	return simple_tuplecall([&os](const std::string& fstr, PrnTypes... prnitems) mutable -> OutStream&
		{return output_helper(os, fstr, prnitems...);}, items);
    }; /* format::output */



    // Create object Formatter from passed parameters
    // for formatting output according format string as (x)prinf() library
    // (Using (x)printf() library with iostream sequence.)
    template<typename... PrnTypes>
    inline const Formatter<PrnTypes...> format(const std::string&& formatstr, PrnTypes&&... prn_values)
    {
	return Formatter<PrnTypes...>(std::forward<const std::string>(formatstr), std::forward<PrnTypes>(prn_values)...);
    }; /* format */

    template<typename OutStream, typename... PrnTypes>
    inline OutStream& operator << (OutStream& os, const Formatter<PrnTypes...> &&fmt)
    {
	return fmt.output(os);
    }; /* template <OutStream> OutStream& operator << (OutStream &, const format &) */


    // Generate call 'format' with parameters from the expression
    template<typename T, typename...PrnTypes>
    inline Formatter<PrnTypes..., T> operator %(const Formatter<PrnTypes...> fmt, T prnitem) {
//	return Formatter<PrnTypes..., T>(fmt, prnitem);
	return fmt.generate(std::forward<T>(prnitem));
    };

}; /* namespace aso */


template <typename OutStream>
inline OutStream& operator << (OutStream &os, const std::function<int(OutStream&)> fn) {
	fn (os); return os; }

#endif // __EXTRSTREAM_ASO__
